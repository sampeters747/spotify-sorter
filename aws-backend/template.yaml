AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HTTP API
  
Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Runtime: nodejs14.x

Parameters:
  SpotifyIdParameter:
    NoEcho: true
    Type: String
    Description: Application's Spotify client id.
    MinLength: 1
  SpotifySecretParameter:
    NoEcho: true
    Type: String
    Description: Application's Spotify client secret.
    MinLength: 1
  JWTSecretParameter:
    NoEcho: true
    Type: String
    Description: String used to sign application JWTs.
    MinLength: 1
  AWSParameter:
    Type: String
    Description: Indicates what environment functions are executing in.
  RedirectUriParameter:
    Type: String
    MinLength: 1
    Description: Where users are redirected after logging in via Spotify.


Resources:
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: "Prod"
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowHeaders:
          - x-apigateway-header
          - cookie
          - access-control-allow-origin
          - content-type

        AllowOrigins:
          - "http://localhost:3000"
          - "http://localhost"
        MaxAge: 20
        AllowCredentials: true
      Auth:
        DefaultAuthorizer: LambdaRequestAuthorizer
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn
            FunctionInvokeRole: arn:aws:iam::121961717171:role/lambda_invoke_function_assume_apigw_role
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 
      CodeUri: lambdas/login
      Handler: login.lambdaHandler
      Layers:
        - !Ref Dependencies
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt LibraryManagerSNSTopic.TopicName
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref LibraryManagerSNSTopic
          SPOTIFY_CLIENT_ID: !Ref SpotifyIdParameter
          SPOTIFY_CLIENT_SECRET: !Ref SpotifySecretParameter
          TOKEN_SECRET: !Ref JWTSecretParameter
          AWS: !Ref AWSParameter
          REDIRECT_URI: !Ref RedirectUriParameter
      Events:
        LoginEvent:
          Type: HttpApi 
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /login
            Method: get
            Auth:
              Authorizer: NONE

  MeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 
      CodeUri: lambdas/me
      Handler: me.lambdaHandler
      Layers:
        - !Ref Dependencies
      Environment:
        Variables:
          SPOTIFY_CLIENT_ID: !Ref SpotifyIdParameter
          SPOTIFY_CLIENT_SECRET: !Ref SpotifySecretParameter
          TOKEN_SECRET: !Ref JWTSecretParameter
          AWS: !Ref AWSParameter
      Events:
        MeEvent:
          Type: HttpApi 
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /me
            Method: get

  ImportSongsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Fetches a user's songs from Spotify and saves it to a DynamoDB table.
      CodeUri: lambdas/import-songs
      Handler: import-songs.lambdaHandler
      Layers:
        - !Ref Dependencies
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
          SPOTIFY_CLIENT_ID: !Ref SpotifyIdParameter
          SPOTIFY_CLIENT_SECRET: !Ref SpotifySecretParameter
          TOKEN_SECRET: !Ref JWTSecretParameter
          AWS: !Ref AWSParameter
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - SNSCrudPolicy:
            TopicName: !GetAtt LibraryManagerSNSTopic.TopicName
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref LibraryManagerSNSTopic
            FilterPolicy:
              operation:
                - import_songs
        ImportSongsRequest:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /importsongs
            Method: get

  ImportSongsFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ImportSongsFunction
      Principal: sns.amazonaws.com

  UserSongsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Description: Retrieves user's saved songs from DynamoDB table and passes them to the client.
      CodeUri: lambdas/user-songs
      Handler: user-songs.lambdaHandler
      Layers:
        - !Ref Dependencies
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
          SPOTIFY_CLIENT_ID: !Ref SpotifyIdParameter
          SPOTIFY_CLIENT_SECRET: !Ref SpotifySecretParameter
          TOKEN_SECRET: !Ref JWTSecretParameter
          AWS: !Ref AWSParameter
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        UserSongsRequest:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /usersongs
            Method: get

  TestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 
      CodeUri: lambdas/test
      Handler: test.lambdaHandler
      Layers:
        - !Ref Dependencies
      Events:
        TestEvent:
          Type: HttpApi 
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /test
            Method: get

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/auth
      Handler: auth.lambdaHandler
      Layers:
        - !Ref Dependencies
      Environment:
        Variables:
          TOKEN_SECRET: !Ref JWTSecretParameter
          AWS: !Ref AWSParameter

  Dependencies:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedNodeDependencies
      Description: Node dependencies shared by multiple lambdas.
      ContentUri: layers/dependencies/.
      CompatibleRuntimes:
          - nodejs14.x
      RetentionPolicy: Delete
    Metadata:
        BuildMethod: nodejs14.x

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "PlaylistApplicationTable"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: primaryId
          AttributeType: S
        - AttributeName: secondaryId
          AttributeType: S
      KeySchema:
        - AttributeName: "primaryId"
          KeyType: "HASH"
        - AttributeName: "secondaryId"
          KeyType: "RANGE"
  
  LibraryManagerSNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: LibrarySNS
      TopicName: LibrarySNS

Outputs:
  LoginApi:
    Description: "API Gateway endpoint URL for Prod stage for login function"
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login/"
  LoginFunction:
    Description: "Login Lambda Function ARN"
    Value: !GetAtt LoginFunction.Arn
  LoginFunctionIamRole:
    Description: "Implicit IAM Role created for Login function"
    Value: !GetAtt LoginFunctionRole.Arn
