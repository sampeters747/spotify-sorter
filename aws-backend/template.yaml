AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HTTP API
  
Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: nodejs14.x

Parameters:
  SpotifyIdParameter:
    NoEcho: true
    Type: String
    Description: Application's Spotify client id.
    MinLength: 1
  SpotifySecretParameter:
    NoEcho: true
    Type: String
    Description: Application's Spotify client secret.
    MinLength: 1
  JWTSecretParameter:
    NoEcho: true
    Type: String
    Description: String used to sign application JWTs.
    MinLength: 1
  AWSParameter:
    Type: String
    Description: Indicates what environment functions are executing in.


Resources:
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: "Prod"
      CorsConfiguration:
        AllowOrigins:
          - "http://localhost:3000"
        MaxAge: 20
        AllowCredentials: true
      Auth:
        DefaultAuthorizer: LambdaRequestAuthorizer
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn
            FunctionInvokeRole: !GetAtt AuthFunctionRole.Arn
            Identity:
              Headers:
                - Cookie
              ReauthorizeEvery: 0
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 
      CodeUri: lambdas/login
      Handler: login.lambdaHandler
      Layers:
        - !Ref Dependencies
      Environment:
        Variables:
          SPOTIFY_CLIENT_ID: !Ref SpotifyIdParameter
          SPOTIFY_CLIENT_SECRET: !Ref SpotifySecretParameter
          TOKEN_SECRET: !Ref JWTSecretParameter
          AWS: !Ref AWSParameter
      Events:
        LoginEvent:
          Type: HttpApi 
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /login
            Method: post
            Auth:
              Authorizer: NONE

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/auth
      Handler: auth.lambdaHandler
      Layers:
        - !Ref Dependencies
      Events:
        AuthEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /auth
            Method: get

  Dependencies:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedNodeDependencies
      Description: Node dependencies shared by multiple lambdas.
      ContentUri: layers/dependencies/.
      CompatibleRuntimes:
          - nodejs14.x
      RetentionPolicy: Delete
    Metadata:
        BuildMethod: nodejs14.x

Outputs:
  LoginApi:
    Description: "API Gateway endpoint URL for Prod stage for login function"
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login/"
  LoginFunction:
    Description: "Login Lambda Function ARN"
    Value: !GetAtt LoginFunction.Arn
  LoginFunctionIamRole:
    Description: "Implicit IAM Role created for Login function"
    Value: !GetAtt LoginFunctionRole.Arn
